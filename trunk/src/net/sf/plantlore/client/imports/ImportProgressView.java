package net.sf.plantlore.client.imports;

import java.util.Observable;
import java.util.Observer;



public class ImportProgressView  extends javax.swing.JFrame implements Observer {

	private ImportMng model;
	private int count = 0;
    
    /** Creates new form ExportProgressView */
    public ImportProgressView(ImportMng model) {
    	this.model = model;
        initComponents();
        setLocationRelativeTo(null); // center of the screen
        
        this.model.addObserver(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        status = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        abort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        status.setText("Erised stra ehru oyt ube cafru oyt on wohsi");
        status.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        abort.setText("Abort");
        
        progress.setMinimum(0);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(progress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, abort))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(abort)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton abort;
    protected javax.swing.JProgressBar progress;
    protected javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
    
    
    @Override
    public void setVisible(boolean visible) {
    	status.setText("Initializing...");
   		progress.setIndeterminate(true);
   		progress.setStringPainted(false);
    	abort.setText("Abort");
    	super.setVisible(visible);
    	update(null, null);
    }
	
	
	
    private boolean exceptionOccured = false;
    
	
	public void update(Observable source, Object parameter) {
		// The final cleanup may overwrite the exception! 
		if(exceptionOccured)
			return;
		
		if( parameter != null && parameter instanceof Exception ) {
			Exception e = (Exception) parameter;
			setTitle("Import interrupted");
			status.setText("An exception interrupted the import procedure: " + e);
			progress.setValue(0);
			abort.setText("Close");
			exceptionOccured = true;
		}
		else if(model.isAborted()) {
			setTitle("Import aborted");
			count = model.getNumberOfImported();
			status.setText("Import procedure aborted.\n " + count + " records imported.");
			progress.setValue(0);
			abort.setText("Close");
		} 
		else if(!model.isImportInProgress()) {
			setTitle("Import completed");
			status.setText("Completed...");
			progress.setMaximum(100);
			progress.setValue(100);
			abort.setText("Close");
		}
		else if( this.isVisible() ) {
			count = model.getNumberOfImported();
			progress.setValue( count );
			status.setText("Importing\n " + count + ".");
			setTitle("Imported " + count);
		}
	}

}
