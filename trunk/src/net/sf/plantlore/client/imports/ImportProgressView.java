package net.sf.plantlore.client.imports;

import java.util.Observable;
import java.util.Observer;

import net.sf.plantlore.l10n.L10n;



public class ImportProgressView  extends javax.swing.JFrame implements Observer {

	private ImportMng model;
	private int processed = 0, rejected = 0, total = 0, updated = 0, deleted = 0, inserted = 0;
    
    /** Creates new form ExportProgressView */
    public ImportProgressView(ImportMng model) {
    	this.model = model;
        initComponents();
        setLocationRelativeTo(null); // center of the screen
        
        this.model.addObserver(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        status = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        abort = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        info = new javax.swing.JTextArea();

        setTitle(L10n.getString("Import.Title"));
        status.setText("You will see the number of imported records here.");
        status.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        abort.setText("Abort");

        info.setColumns(20);
        info.setEditable(false);
        info.setRows(5);
        info.setTabSize(2);
        info.setOpaque(false);
        jScrollPane1.setViewportView(info);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(abort)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, progress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(status)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(abort)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton abort;
    private javax.swing.JTextArea info;
    private javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JProgressBar progress;
    protected javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
    
    
    @Override
    public void setVisible(boolean visible) {
    	status.setText(L10n.getString("Import.Initializing"));
    	abort.setText(L10n.getString("Import.Abort"));
    	
    	total = model.getNumberOfRecords();
    	if(total < 0) {
    		progress.setStringPainted(false);
    		progress.setIndeterminate(true);
    	}
    	else {
    		progress.setStringPainted(true);
    		progress.setIndeterminate(false);
    		progress.setMaximum(total);
    	}
    	
    	super.setVisible(visible);
    	update(null, null);
    }

    /**
     * Set the initial state of the component.
     *
     */
    public void reset() {
    	processed =  rejected =  total =  updated =  deleted =  inserted = 0;
    	exceptionOccured = false;
    }
	
	
	
    private boolean exceptionOccured = false;
    private StringBuilder sigma = new StringBuilder(256);
    
    private String getInformation() {
    	rejected = model.getNumberOfRejected();
    	updated = model.getNumbeOfUpdated();
    	deleted = model.getNumbderOfDeleted();
    	inserted = model.getNumberOfInserted();

    	processed = rejected + updated + deleted + inserted;
    	
    	sigma.delete(0, 255);
    	if(inserted > 0)
    		sigma.append(inserted).append(' ').append(L10n.getString("Import.RecordsInserted")).append(' ');
    	if(updated > 0)
    		sigma.append(updated).append(' ').append(L10n.getString("Import.RecordsUpdated")).append(' ');
    	if(deleted > 0)
    		sigma.append(deleted).append(' ').append(L10n.getString("Import.RecordsDeleted")).append(' ');
    	if(rejected > 0)
    		sigma.append(rejected).append(' ').append(L10n.getString("Import.RecordsRejected"));
    	
    	return sigma.toString();
    }
    
	
	public void update(Observable source, Object parameter) {
		// The final cleanup may overwrite the exception! 
		if(exceptionOccured)
			return;
		
		String description = getInformation();
		
		if( parameter instanceof String ) {
			info.append(parameter + "\n");
		}
		
		if( parameter != null && parameter instanceof Exception ) {
			Exception e = (Exception) parameter;
			setTitle(L10n.getString("Import.Failed"));
			status.setText(e.getMessage());
			progress.setIndeterminate(false);
			progress.setValue(0);
			abort.setText(L10n.getString("Import.Hide"));
			exceptionOccured = true;
		}
		else if(model.isAborted()) {
			setTitle(L10n.getString("Import.Aborted"));
			status.setText(processed + " " + L10n.getString("Import.RecordsProcessed"));
			progress.setIndeterminate(false);
			progress.setValue(0);
			abort.setText(L10n.getString("Import.Hide"));
		} 
		else if(!model.isImportInProgress()) {
			setTitle(L10n.getString("Import.Completed"));
			status.setText( description );
			progress.setIndeterminate(false);
			progress.setMaximum(100);
			progress.setValue(100);
			abort.setText(L10n.getString("Import.Hide"));
		}
		else if( this.isVisible() ) {
			progress.setValue( processed );
			status.setText( description );
			if(total <= 0)
				setTitle(processed + L10n.getString("Import.RecordsProcessed"));
			else {
				String percent = Integer.toString(100*processed/total) + "%";
				setTitle(percent + " " + L10n.getString("Import.Progress"));
				progress.setString(percent);
			}
		}
	}

}
