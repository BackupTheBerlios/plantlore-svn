/*
 * ExportProgressView.java
 *
 * Created on 29. duben 2006, 22:01
 */

package net.sf.plantlore.client.export;

import java.util.Observable;
import java.util.Observer;

/**
 *
 * @author  Erik Kratochv√≠l
 */
public class ExportProgressView extends javax.swing.JFrame implements Observer {
	
	private ExportMng model;
	private int total;
    
    /** Creates new form ExportProgressView */
    public ExportProgressView(ExportMng model) {
    	this.model = model;
        initComponents();
        setLocationRelativeTo(null); // center of the screen
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        status = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        abort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        status.setText("Erised stra ehru oyt ube cafru oyt on wohsi");
        status.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        abort.setText("Abort");
        
        progress.setMinimum(0);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(progress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, abort))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(progress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(abort)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton abort;
    protected javax.swing.JProgressBar progress;
    protected javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
    
    
    @Override
    public void setVisible(boolean visible) {
    	status.setText("Initializing...");
    	total = model.getNumberOfResults();
    	if(total > 0) {
    		progress.setIndeterminate(false);
    		progress.setMaximum( total );
    		progress.setStringPainted(true);
    	}
    	else {
    		progress.setIndeterminate(true);
    		progress.setStringPainted(false);
    	}
    	
    	super.setVisible(visible);
    	
    	update(null, null);
    }
    
    
    
	public void update(Observable source, Object parameter) {
		if(model.isAborted()) 
			status.setText("Aborting...");
		else if( this.isVisible() ) {
			int count = model.getNumberOfExported();
			if(count >= 0) {
				progress.setValue( count );
				if(total > 0) { 
					progress.setString( Integer.toString(100*count / total) );
					status.setText("Exporting " + count + ". of " + total);
				}
				else
					status.setText("Exporting " + count + ".");
			}
		}
	}
    
}
