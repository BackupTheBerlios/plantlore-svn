/*
 * AddEdit2.java
 *
 * Created on 23. b≈ôezen 2006, 23:16
 */

package net.sf.plantlore.client.overview;

import java.awt.Dimension;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.PlainDocument;
import net.sf.plantlore.client.*;
import net.sf.plantlore.common.AutoComboBox;
import net.sf.plantlore.common.AutoComboBoxNG3;
import net.sf.plantlore.common.AutoTextArea;
import net.sf.plantlore.common.DefaultEscapeKeyPressed;
import net.sf.plantlore.common.DocumentSizeFilter;
import net.sf.plantlore.common.Pair;
import net.sf.plantlore.common.PlantloreHelp;
import net.sf.plantlore.common.TabTransfersFocus;
import net.sf.plantlore.common.record.AuthorOccurrence;
import net.sf.plantlore.common.record.Habitat;
import net.sf.plantlore.common.record.Occurrence;
import net.sf.plantlore.l10n.L10n;
import org.apache.log4j.Logger;

/**
 *
 * @author  reimei
 */
public class AddEditView extends javax.swing.JDialog implements Observer {
    private Logger logger;
    private static final int DIALOG_WIDTH = 1000;
    private static final int MAX_GPS_SYMBOL_LENGTH = 20;
    private static final String REQUIRED_STRING  = "(*)";
    private boolean visible=true;
    private AddEdit model;
    private boolean inEditMode = false;
    private boolean inAddMode = true;
    protected AuthorTableModel tableModel;
    private NumberFormat numberFormat = NumberFormat.getNumberInstance( L10n.getCurrentLocale() );

    /** Creates new form AddEdit2 */
    public AddEditView(java.awt.Frame parent, boolean modal, AddEdit model, boolean edit) {
        super(parent, modal);
        logger = Logger.getLogger(this.getClass().getPackage().getName());                

        assert model != null;
        
        numberFormat.setMaximumFractionDigits(AddEditCtrl.MAXIMUM_FRACTION_DIGITS);
        numberFormat.setMaximumIntegerDigits(AddEditCtrl.MAXIMUM_INTEGER_DIGITS);
        this.model = model;
        model.addObserver(this);
        this.inEditMode = edit;
        this.inAddMode = ! edit;
        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        initComponents();
        PlantloreHelp.addKeyHelp(PlantloreHelp.ADD_OCCURRENCE, this.getRootPane());
        PlantloreHelp.addButtonHelp(PlantloreHelp.ADD_OCCURRENCE, this.helpButton);
        
        getRootPane().setDefaultButton(okButton);
        
        setLabels();
        
        setSizeRestrictions();
        
        occurrenceTable.setModel(model.getOccurrenceTableModel());
        occurrenceTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //occurrenceTable.setRowSelectionAllowed(false);
        
        extendedPanel.setVisible(visible);
        setLocationRelativeTo(parent);
        this.pack();
    }
    
           
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        convertCoordinatesGroup = new javax.swing.ButtonGroup();
        jScrollPane8 = new javax.swing.JScrollPane();
        topPanel = new javax.swing.JPanel();
        basicPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        quadrantLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        territoryNameLabel = new javax.swing.JLabel();
        phytNameLabel = new javax.swing.JLabel();
        territoryNameCombo = new AutoComboBoxNG3(true);
        phytNameCombo = new AutoComboBoxNG3(true);
        phytCountryCombo = new AutoComboBoxNG3(false);
        quadrantTextField = new javax.swing.JTextField();
        townLabel = new javax.swing.JLabel();
        //items = new Object[] {"Praha", "Brno", "Turnov", "Trebic"};
        townComboBox = new AutoComboBoxNG3(true);
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionArea = new javax.swing.JTextArea();
        placeDescriptionLabel = new javax.swing.JLabel();
        gpsPanel = new javax.swing.JPanel();
        altitudeLabel = new javax.swing.JLabel();
        latitudeLabel = new javax.swing.JLabel();
        longitudeLabel = new javax.swing.JLabel();
        altitudeTextField = new javax.swing.JTextField();
        latitudeTextField = new javax.swing.JTextField();
        longitudeTextField = new javax.swing.JTextField();
        gpsLoadButton = new javax.swing.JButton();
        gpsShowButton = new javax.swing.JButton();
        gpsSymbolTextField = new javax.swing.JTextField();
        gpsSymbolLabel = new javax.swing.JLabel();
        gpsTableLabel = new javax.swing.JLabel();
        coordinateSystemLabel = new javax.swing.JLabel();
        gpsChangeButton = new javax.swing.JButton();
        locationNoteLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        locationNoteArea = new javax.swing.JTextArea();
        clearLocationButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();

        taxonTextArea = new AutoTextArea(this);
        taxonLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        monthLabel = new javax.swing.JLabel();
        dayLabel = new javax.swing.JLabel();
        monthChooser = new com.toedter.calendar.JMonthChooser();
        timeLabel = new javax.swing.JLabel();
        timeTextField = new javax.swing.JTextField();
        dayTextField = new javax.swing.JTextField();
        yearLabel = new javax.swing.JLabel();
        yearSpinner = new javax.swing.JSpinner();
        calendarButton = new javax.swing.JButton();
        sourceCombo = new AutoComboBoxNG3(false);
        sourceLabel = new javax.swing.JLabel();
        publicationLabel = new javax.swing.JLabel();
        publicationCombo = new AutoComboBoxNG3(true);
        herbariumTextField = new javax.swing.JTextField();
        herbariumLabel = new javax.swing.JLabel();
        projectLabel = new javax.swing.JLabel();
        projectCombo = new AutoComboBoxNG3(true);
        checklistButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        occurrenceNoteArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        authorTable = new javax.swing.JTable();
        occurrenceNoteLabel = new javax.swing.JLabel();
        clearOccurrenceButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        requiredInfoLabel = new javax.swing.JLabel();
        extendedPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        occurrenceTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jScrollPane8.setPreferredSize(new java.awt.Dimension(920, 685));
        topPanel.setLayout(new java.awt.BorderLayout());

        topPanel.setMinimumSize(new java.awt.Dimension(700, 100));
        topPanel.setPreferredSize(new java.awt.Dimension(920, 680));
        basicPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, L10n.getString("AddEdit.BasicData"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        basicPanel.setMinimumSize(new java.awt.Dimension(600, 0));
        basicPanel.setPreferredSize(new java.awt.Dimension(900, 520));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, L10n.getString("AddEdit.LocationPanel"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        jPanel5.setPreferredSize(new java.awt.Dimension(914, 500));
        quadrantLabel.setText("Quadrant:");

        countryLabel.setText("Country:");

        territoryNameLabel.setText("Territory name:");

        phytNameLabel.setText("Phytochoria name:");

        territoryNameCombo.setActionCommand("territoryNameCombo");

        phytNameCombo.setActionCommand("phytNameCombo");

        phytCountryCombo.setActionCommand("phytCountryCombo");
        phytCountryCombo.insertItemAt(model.EMPTY_STRING,0);

        quadrantTextField.setActionCommand("quadrantTextField");

        townLabel.setText("Nearest bigger seat:");

        townComboBox.setActionCommand("townComboBox");

        descriptionArea.setColumns(20);
        descriptionArea.setRows(5);
        descriptionArea.setLineWrap(true);
        descriptionArea.setWrapStyleWord(true);
        new TabTransfersFocus(descriptionArea);
        jScrollPane2.setViewportView(descriptionArea);

        placeDescriptionLabel.setText("Place description:");

        gpsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, L10n.getString("AddEdit.GPSPanel"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
        altitudeLabel.setText("Altitude:");

        latitudeLabel.setText("Latitude:");

        longitudeLabel.setText("Longitude:");

        altitudeTextField.setNextFocusableComponent(latitudeTextField);

        latitudeTextField.setNextFocusableComponent(longitudeTextField);

        gpsLoadButton.setText("Load");

        gpsShowButton.setText("Show");

        gpsSymbolLabel.setText("Symbol:");

        gpsTableLabel.setText("GPS table:");

        coordinateSystemLabel.setText("Coordinate system:");

        gpsChangeButton.setText("Change");

        org.jdesktop.layout.GroupLayout gpsPanelLayout = new org.jdesktop.layout.GroupLayout(gpsPanel);
        gpsPanel.setLayout(gpsPanelLayout);
        gpsPanelLayout.setHorizontalGroup(
            gpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(gpsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(gpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(gpsLoadButton)
                    .add(gpsShowButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(gpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(gpsPanelLayout.createSequentialGroup()
                        .add(gpsSymbolLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(gpsSymbolTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                        .add(39, 39, 39)
                        .add(latitudeLabel)
                        .add(4, 4, 4))
                    .add(gpsPanelLayout.createSequentialGroup()
                        .add(gpsTableLabel)
                        .add(155, 155, 155)))
                .add(gpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(gpsPanelLayout.createSequentialGroup()
                        .add(latitudeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(longitudeLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(longitudeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(altitudeLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(altitudeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(gpsPanelLayout.createSequentialGroup()
                        .add(coordinateSystemLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(gpsChangeButton)))
                .addContainerGap())
        );

        gpsPanelLayout.linkSize(new java.awt.Component[] {gpsChangeButton, gpsLoadButton, gpsShowButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        gpsPanelLayout.linkSize(new java.awt.Component[] {altitudeTextField, gpsSymbolTextField, latitudeTextField, longitudeTextField}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        gpsPanelLayout.setVerticalGroup(
            gpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(gpsPanelLayout.createSequentialGroup()
                .add(gpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(gpsLoadButton)
                    .add(gpsSymbolLabel)
                    .add(gpsSymbolTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(latitudeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(longitudeLabel)
                    .add(longitudeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(altitudeLabel)
                    .add(altitudeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(latitudeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(gpsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(gpsShowButton)
                    .add(gpsTableLabel)
                    .add(gpsChangeButton)
                    .add(coordinateSystemLabel)))
        );

        gpsPanelLayout.linkSize(new java.awt.Component[] {gpsLoadButton, gpsShowButton}, org.jdesktop.layout.GroupLayout.VERTICAL);

        locationNoteLabel.setText("Location note:");

        locationNoteArea.setColumns(20);
        locationNoteArea.setRows(5);
        locationNoteArea.setLineWrap(true);
        locationNoteArea.setWrapStyleWord(true);
        new TabTransfersFocus(locationNoteArea);
        jScrollPane4.setViewportView(locationNoteArea);

        clearLocationButton.setText("Vyma\u017e");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(7, 7, 7)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(7, 7, 7)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(territoryNameLabel)
                            .add(quadrantLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, quadrantTextField)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, territoryNameCombo, 0, 145, Short.MAX_VALUE))
                        .add(12, 12, 12)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, phytNameLabel)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, countryLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(phytCountryCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(phytNameCombo, 0, 133, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(townLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(townComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(gpsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(clearLocationButton))
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel5Layout.createSequentialGroup()
                                        .add(placeDescriptionLabel)
                                        .add(434, 434, 434))
                                    .add(jPanel5Layout.createSequentialGroup()
                                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(locationNoteLabel)
                                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 286, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(69, 69, 69))
        );

        jPanel5Layout.linkSize(new java.awt.Component[] {quadrantTextField, territoryNameCombo}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(territoryNameLabel)
                            .add(territoryNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(phytNameLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(quadrantLabel)
                            .add(quadrantTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(countryLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(placeDescriptionLabel)
                            .add(locationNoteLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(phytNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(townLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(townComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(phytCountryCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane4, 0, 0, Short.MAX_VALUE)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(gpsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(clearLocationButton))
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Occurrence"));
        jPanel7.setPreferredSize(new java.awt.Dimension(914, 300));
        taxonTextArea.setColumns(20);
        taxonTextArea.setRows(5);
        taxonTextArea.setAutoscrolls(false);
        jScrollPane3.setViewportView(taxonTextArea);

        taxonLabel.setText("Taxon:");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, L10n.getString("AddEdit.TimePanel"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        monthLabel.setText("Month:");

        dayLabel.setText("Day:");

        ((JComboBox)monthChooser.getComboBox()).addItem("");
        monthChooser.setLocale(L10n.getCurrentLocale());

        timeLabel.setText("Time:");

        timeTextField.setNextFocusableComponent(okButton);

        yearLabel.setText("Year:");

        yearSpinner.setValue(2006);
        ((SpinnerNumberModel)yearSpinner.getModel()).setMinimum(1);

        calendarButton.setText("Calendar");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(19, 19, 19)
                        .add(dayLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(dayTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(timeLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(timeTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(monthLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(monthChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yearLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(calendarButton))
                .addContainerGap())
        );

        jPanel4Layout.linkSize(new java.awt.Component[] {dayTextField, timeTextField}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(monthLabel)
                            .add(dayLabel)
                            .add(dayTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(6, 6, 6)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(timeLabel)
                            .add(timeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(yearLabel))
                            .add(monthChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(calendarButton)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sourceCombo.setActionCommand("sourceCombo");
        sourceCombo.insertItemAt(model.EMPTY_STRING,0);

        sourceLabel.setText("Source:");

        publicationLabel.setText("Publication:");

        publicationCombo.setActionCommand("publicationCombo");
        publicationCombo.insertItemAt(model.EMPTY_PAIR,0);

        herbariumTextField.setActionCommand("herbariumTextField");

        herbariumLabel.setText("Herbarium:");

        projectLabel.setText("Project:");

        projectCombo.setActionCommand("projectCombo");

        checklistButton.setText("Checklist");

        occurrenceNoteArea.setColumns(20);
        occurrenceNoteArea.setRows(5);
        occurrenceNoteArea.setLineWrap(true);
        occurrenceNoteArea.setWrapStyleWord(true);
        new TabTransfersFocus(occurrenceNoteArea);
        jScrollPane5.setViewportView(occurrenceNoteArea);

        authorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(authorTable);

        occurrenceNoteLabel.setText("Occurrence note:");

        clearOccurrenceButton.setText("Vyma\u017e");

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(taxonLabel)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel7Layout.createSequentialGroup()
                                .add(checklistButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 340, Short.MAX_VALUE)
                                .add(clearOccurrenceButton))
                            .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(sourceLabel)
                            .add(projectLabel)
                            .add(publicationLabel)
                            .add(herbariumLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(herbariumTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .add(publicationCombo, 0, 146, Short.MAX_VALUE)
                            .add(projectCombo, 0, 146, Short.MAX_VALUE)
                            .add(jPanel7Layout.createSequentialGroup()
                                .add(sourceCombo, 0, 146, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .add(19, 19, 19))
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(occurrenceNoteLabel)
                            .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        jPanel7Layout.linkSize(new java.awt.Component[] {checklistButton, clearOccurrenceButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(occurrenceNoteLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel7Layout.createSequentialGroup()
                                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(checklistButton)
                                    .add(clearOccurrenceButton)))
                            .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(jPanel7Layout.createSequentialGroup()
                                    .add(taxonLabel)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel7Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(sourceLabel)
                                        .add(sourceCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(publicationLabel)
                                        .add(publicationCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(projectLabel)
                                        .add(projectCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(herbariumLabel)
                                        .add(herbariumTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout basicPanelLayout = new org.jdesktop.layout.GroupLayout(basicPanel);
        basicPanel.setLayout(basicPanelLayout);
        basicPanelLayout.setHorizontalGroup(
            basicPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(basicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(basicPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        basicPanelLayout.setVerticalGroup(
            basicPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(basicPanelLayout.createSequentialGroup()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 248, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(103, 103, 103))
        );
        topPanel.add(basicPanel, java.awt.BorderLayout.NORTH);

        buttonPanel.setPreferredSize(new java.awt.Dimension(800, 50));
        cancelButton.setText("Cancel");

        okButton.setText("Ok");

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        settingsButton.setText("Nastaven\u00ed");

        requiredInfoLabel.setText("requiredInfoLabel");

        org.jdesktop.layout.GroupLayout buttonPanelLayout = new org.jdesktop.layout.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(helpButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(settingsButton)
                .add(64, 64, 64)
                .add(requiredInfoLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 436, Short.MAX_VALUE)
                .add(okButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cancelButton)
                .addContainerGap())
        );

        buttonPanelLayout.linkSize(new java.awt.Component[] {cancelButton, helpButton, okButton, settingsButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(helpButton)
                    .add(settingsButton)
                    .add(cancelButton)
                    .add(okButton)
                    .add(requiredInfoLabel))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        buttonPanelLayout.linkSize(new java.awt.Component[] {cancelButton, helpButton, okButton}, org.jdesktop.layout.GroupLayout.VERTICAL);

        topPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        extendedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, L10n.getString("AddEdit.ExtendedData"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
        extendedPanel.setMinimumSize(new java.awt.Dimension(800, 50));
        extendedPanel.setPreferredSize(new java.awt.Dimension(800, 50));
        occurrenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Pampeliska", "Vysockij", "1.1.1900"},
                {"Metropolis", "Fritz Lang", "3.7.1927"},
                {null, null, null}
            },
            new String [] {
                "Taxon", "Autor", "Datum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(occurrenceTable);

        org.jdesktop.layout.GroupLayout extendedPanelLayout = new org.jdesktop.layout.GroupLayout(extendedPanel);
        extendedPanel.setLayout(extendedPanelLayout);
        extendedPanelLayout.setHorizontalGroup(
            extendedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(extendedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
                .addContainerGap())
        );
        extendedPanelLayout.setVerticalGroup(
            extendedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(extendedPanelLayout.createSequentialGroup()
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        topPanel.add(extendedPanel, java.awt.BorderLayout.CENTER);

        jScrollPane8.setViewportView(topPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 943, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_helpButtonActionPerformed
    
    
    /** Used for to hack DefaultCellEditor's behaviour with JComboBox. Fix of Bug #008588	Author table breaks sometimes
     *
     * Normally the editing doesn't stop when the comboboxe's popup menu is cancelled (user didn't choose an item and clicked somewhere else).
     * This listener cancels further editing which makes the combobox disappear as it should have (I think).
     */
    class PopupListener implements PopupMenuListener {
        DefaultCellEditor dce;
        
        public void setCellEditor(DefaultCellEditor dce) {
            assert dce != null;
            
            this.dce = dce;
        }
        
        public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
        }

        public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
        }

        public void popupMenuCanceled(PopupMenuEvent e) {
            dce.cancelCellEditing();
        }
    }
    
    //musn't delete contents of tableModel, because it's also called to update the table's user interface unfortunately...
    protected void initAuthorTable() {
        if (tableModel == null) 
            tableModel = new AuthorTableModel(model);
        authorTable.setModel(tableModel);

        //authorTable.setDefaultEditor(JButton.class, new ButtonEditor());
        //authorTable.setDefaultRenderer(JButton.class, new ButtonEditor());

        TableColumn tc1 = authorTable.getColumnModel().getColumn(0);
        TableColumn tc2 = authorTable.getColumnModel().getColumn(1);
        TableColumn tc3 = authorTable.getColumnModel().getColumn(2);
        TableColumn tc4 = authorTable.getColumnModel().getColumn(3);

        JComboBox cb;
        /*if (model.getAuthors() == null) 
            cb = new AutoComboBox();
        else
            cb = new AutoComboBox(model.getAuthors());
        
        ((AutoComboBox)cb).setStrict(true);
        tc1.setCellEditor(new DefaultCellEditor(cb));  
        
        if (model.getAuthorRoles() == null) 
            cb = new AutoComboBox();
        else
            cb = new AutoComboBox(model.getAuthorRoles());
        
        ((AutoComboBox)cb).setStrict(true);
        tc2.setCellEditor(new DefaultCellEditor(cb));
*/      
//        
        if (model.getAuthors() == null) 
            cb = new JComboBox();
        else
            cb = new JComboBox(model.getAuthors());
        
        //Fix of Bug #008588	Author table breaks sometimes
        PopupListener pl = new PopupListener(); cb.addPopupMenuListener(pl); DefaultCellEditor dce = new DefaultCellEditor(cb); pl.setCellEditor(dce);
        tc1.setCellEditor(dce);  
        
        if (model.getAuthorRoles() == null) 
            cb = new JComboBox();
        else
            cb = new JComboBox(model.getAuthorRoles());
        
        //Fix of Bug #008588	Author table breaks sometimes
        pl = new PopupListener(); cb.addPopupMenuListener(pl); dce = new DefaultCellEditor(cb); pl.setCellEditor(dce);
        tc2.setCellEditor(dce);
//  
        ButtonEditor be = new ButtonEditor(model);
        tc3.setCellEditor(be);
        tc3.setCellRenderer(be);
        
        AuthorRevisionEditor are = new AuthorRevisionEditor(model);
        tc4.setCellEditor(are);
    }
    
    private void resetAuthorModel() {
        if (tableModel != null)
            tableModel.reset();
    }
    
    
    public void loadComponetCoordinate() {
         switch (model.getCoordinateSystem()) {
            case AddEdit.WGS84:
                coordinateSystemLabel.setText(L10n.getString("Overview.CoordinateSystemLabel")+": WGS-84");
                break;
            case AddEdit.S42:
                coordinateSystemLabel.setText(L10n.getString("Overview.CoordinateSystemLabel")+": S-42");
                break;
            case AddEdit.SJTSK:
                coordinateSystemLabel.setText(L10n.getString("Overview.CoordinateSystemLabel")+": S-JTSK");
                break;
            default:
                coordinateSystemLabel.setText(L10n.getString("Overview.CoordinateSystemLabel")+": WGS-84");
        }
         
         if (model.getAltitude() != null) altitudeTextField.setText(""+numberFormat.format(model.getAltitude()));
            else altitudeTextField.setText("");
        if (model.getLongitude() != null) longitudeTextField.setText(""+numberFormat.format(model.getLongitude()));
            else longitudeTextField.setText("");
        if (model.getLatitude() != null) latitudeTextField.setText(""+numberFormat.format(model.getLatitude()));
            else latitudeTextField.setText("");
    }
    
    public void loadComponentData()
    {
        switch (model.getCoordinateSystem()) {
            case AddEdit.WGS84:
                coordinateSystemLabel.setText(L10n.getString("Overview.CoordinateSystemLabel")+": WGS-84");
                break;
            case AddEdit.S42:
                coordinateSystemLabel.setText(L10n.getString("Overview.CoordinateSystemLabel")+": S-42");
                break;
            case AddEdit.SJTSK:
                coordinateSystemLabel.setText(L10n.getString("Overview.CoordinateSystemLabel")+": S-JTSK");
                break;
            default:
                coordinateSystemLabel.setText(L10n.getString("Overview.CoordinateSystemLabel")+": WGS-84");
        }
        
        resetAuthorModel();
        initAuthorTable();
        
        if (model.getVillage() != null)
            townComboBox.setSelectedItem(model.getVillage());
        else
            townComboBox.setSelectedIndex(0);
        
        taxonTextArea.setText(model.getTaxon(0));
        descriptionArea.setText(model.getHabitatDescription());
        yearSpinner.setValue(model.getYear());
        
        locationNoteArea.setText(model.getHabitatNote());
        occurrenceNoteArea.setText(model.getOccurrenceNote());
        territoryNameCombo.setSelectedItem(model.getTerritoryName());
        phytNameCombo.setSelectedItem(model.getPhytName());
        if (model.getPhytCountry() != null) 
            phytCountryCombo.setSelectedItem(model.getPhytCountry());
        else
            phytCountryCombo.setSelectedIndex(0);
        quadrantTextField.setText(model.getQuadrant());
        
        if (model.getAltitude() != null) altitudeTextField.setText(""+numberFormat.format(model.getAltitude()));
            else altitudeTextField.setText("");
        if (model.getLongitude() != null) longitudeTextField.setText(""+numberFormat.format(model.getLongitude()));
            else longitudeTextField.setText("");
        if (model.getLatitude() != null) latitudeTextField.setText(""+numberFormat.format(model.getLatitude()));
            else latitudeTextField.setText("");
        
        if (model.getSource() != null) 
            sourceCombo.setSelectedItem(model.getSource());
        else
            sourceCombo.setSelectedIndex(0);
        if (model.getPublication() != null)
            publicationCombo.setSelectedItem(model.getPublication());
        else
            publicationCombo.setSelectedIndex(0);
        
        if (model.getProject() != null)
            projectCombo.setSelectedItem(model.getProject());
        else
            projectCombo.setSelectedIndex(0);
        herbariumTextField.setText(model.getHerbarium());
        
        if (model.getMonth() != null) {
            monthChooser.setMonth(model.getMonth());
        } else
            ((JComboBox)monthChooser.getComboBox()).setSelectedIndex(12);
        
        if (model.getDay() != null)
            dayTextField.setText(""+model.getDay());
        else
            dayTextField.setText("");
    }//loadComponentData
    
    public void clearComponentData() {
        //if ( ! preloadAuthorsCheckBox.isSelected() ) {
            resetAuthorModel(); initAuthorTable();
        //}
        
        townComboBox.setSelectedIndex(-1);
        taxonTextArea.setText("");
        descriptionArea.setText("");
        yearSpinner.setValue(Calendar.getInstance().get(Calendar.YEAR));
        
        locationNoteArea.setText("");
        occurrenceNoteArea.setText("");
        territoryNameCombo.setSelectedIndex(-1);
        phytNameCombo.setSelectedIndex(-1);
        phytCountryCombo.setSelectedIndex(0);
        quadrantTextField.setText("");
        
        altitudeTextField.setText("");
        longitudeTextField.setText("");
        latitudeTextField.setText("");
        sourceCombo.setSelectedIndex(0);
        publicationCombo.setSelectedIndex(0);
        herbariumTextField.setText("");
        
        ((JComboBox)monthChooser.getComboBox()).setSelectedIndex(12);
        //dayChooser.setDay(Calendar.getInstance().get(Calendar.DAY_OF_MONTH));
    }
    
    private void setLabels() {
        townLabel.setText(L10n.getString("AddEdit.TownLabel")+REQUIRED_STRING);
        placeDescriptionLabel.setText(L10n.getString("AddEdit.PlaceDescriptionLabel"));
        yearLabel.setText(L10n.getString("AddEdit.YearLabel")+REQUIRED_STRING);
        taxonLabel.setText(L10n.getString("AddEdit.TaxonLabel")+REQUIRED_STRING);
        
        territoryNameLabel.setText(L10n.getString("AddEdit.TerritoryNameLabel")+REQUIRED_STRING);
        phytNameLabel.setText(L10n.getString("AddEdit.PhytNameLabel")+REQUIRED_STRING);
        quadrantLabel.setText(L10n.getString("AddEdit.QuadrantLabel"));
        countryLabel.setText(L10n.getString("AddEdit.CountryLabel"));
        
        altitudeLabel.setText(L10n.getString("AddEdit.AltitudeLabel"));
        latitudeLabel.setText(L10n.getString("AddEdit.LatitudeLabel"));
        longitudeLabel.setText(L10n.getString("AddEdit.LongitudeLabel"));
        
        sourceLabel.setText(L10n.getString("AddEdit.SourceLabel"));
        publicationLabel.setText(L10n.getString("AddEdit.PublicationLabel"));
        herbariumLabel.setText(L10n.getString("AddEdit.HerbariumLabel"));
        projectLabel.setText(L10n.getString("AddEdit.ProjectLabel")+REQUIRED_STRING);
        
        monthLabel.setText(L10n.getString("AddEdit.MonthLabel"));
        dayLabel.setText(L10n.getString("AddEdit.DayLabel"));
        timeLabel.setText(L10n.getString("AddEdit.TimeLabel"));
        
        helpButton.setText(L10n.getString("Common.Help"));
        helpButton.setMnemonic(L10n.getMnemonic("Common.Help"));
        okButton.setText(L10n.getString("Common.Ok"));
        okButton.setMnemonic(L10n.getMnemonic("Common.Ok"));
        cancelButton.setText(L10n.getString("Common.Cancel"));
        cancelButton.setMnemonic(L10n.getMnemonic("Common.Cancel"));
        gpsChangeButton.setText(L10n.getString("Common.GpsChange"));
        
        Object[] arg = {REQUIRED_STRING};
        requiredInfoLabel.setText(L10n.getFormattedString("AddEdit.RequiredInfoLabel",arg));
    }
    
    private void setSizeRestrictions() {
        PlainDocument pd = (PlainDocument) herbariumTextField.getDocument();
        pd.setDocumentFilter(new DocumentSizeFilter(Occurrence.getColumnSize(Occurrence.HERBARIUM)));

        pd = (PlainDocument) quadrantTextField.getDocument();
        pd.setDocumentFilter(new DocumentSizeFilter(Habitat.getColumnSize(Habitat.QUADRANT)));
        
        ((AutoComboBoxNG3)phytCountryCombo).setCapacity(Habitat.getColumnSize(Habitat.COUNTRY));
        
        pd = (PlainDocument) descriptionArea.getDocument();
        pd.setDocumentFilter(new DocumentSizeFilter(Habitat.getColumnSize(Habitat.DESCRIPTION)));
        
        pd = (PlainDocument) locationNoteArea.getDocument();
        pd.setDocumentFilter(new DocumentSizeFilter(Habitat.getColumnSize(Habitat.NOTE)));
        
        pd = (PlainDocument) gpsSymbolTextField.getDocument();
        pd.setDocumentFilter(new DocumentSizeFilter(MAX_GPS_SYMBOL_LENGTH));

        ((AutoComboBoxNG3)sourceCombo).setCapacity(Occurrence.getColumnSize(Occurrence.DATASOURCE));

        pd = (PlainDocument) occurrenceNoteArea.getDocument();
        pd.setDocumentFilter(new DocumentSizeFilter(Occurrence.getColumnSize(Occurrence.NOTE)));
    }
    
    /**
     *  Check whether setting values of coordinate system are correctly.
     *  @return true whether setting values of coordinate system are correctly.
     */
     public boolean checkValueCoordinate() {    
         
         double tmpLatitude;
         double tmpLongitude;
         double tmpAltitude;        
        
        //check null value
        if (model.getLatitude() == null && model.getLongitude() == null && model.getAltitude() == null) {
             return true;
        } else if (model.getLatitude() != null && model.getLongitude() != null && model.getAltitude() != null) {
             tmpLatitude = model.getLatitude();
             tmpLongitude = model.getLongitude();             
             tmpAltitude = model.getAltitude();
        } else {
             //show information about filling value
             JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.NullValue"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
             return false;
        } 
       
        if (model.getCoordinateSystem() == AddEdit.WGS84) {
            //Check setting value for WGS-84
            if (tmpLatitude < AddEdit.WGS84_MIN_LATITUDE || tmpLatitude > AddEdit.WGS84_MAX_LATITUDE) {
                //show iformation about latitude  
                JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.WGS84_latitude"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
                return false;
            }
            if (tmpLongitude < AddEdit.WGS84_MIN_LONGITUDE || tmpLongitude > AddEdit.WGS84_MAX_LONGITUDE) {
                //show information about longitude
                JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.WGS84_longitude"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
                return false;
            }
            if (tmpAltitude < AddEdit.WGS84_MIN_ALTITUDE || tmpAltitude >  AddEdit.WGS84_MAX_ALTITUDE) {
                //show information about altitude
                JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.WGS84_altitude"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
                return false;
            }
        } else if (model.getCoordinateSystem() == AddEdit.SJTSK) {
            //Check setting value for S-JTSK
            if (tmpLatitude < AddEdit.SJTSK_MIN_Y || tmpLatitude > AddEdit.SJTSK_MAX_Y) {
                //show iformation about latitude
                JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.SJTSK_Y"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
                return false;
            }
            if (tmpLongitude < AddEdit.SJTSK_MIN_X || tmpLongitude > AddEdit.SJTSK_MAX_X) {
                //show information about longitude
                JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.SJTSK_X"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
                return false;
            }
            if (tmpAltitude < AddEdit.SJTSK_MIN_Z || tmpAltitude >  AddEdit.SJTSK_MAX_Z) {
                //show information about altitude
                JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.SJTSK_Z"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
                return false;
            }
        } else {
            //Check setting value for S-42
            if (tmpLatitude < AddEdit.S42_MIN_Y || tmpLatitude > AddEdit.S42_MAX_Y) {
                //show iformation about latitude
                JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.S42_Y"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
                return false;
            }
            if (tmpLongitude < AddEdit.S42_MIN_X || tmpLongitude > AddEdit.S42_MAX_X) {
                //show information about longitude
                JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.S42_X"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
                return false;
            }
            if (tmpAltitude < AddEdit.S42_MIN_Z || tmpAltitude >  AddEdit.S42_MAX_Z) {
                //show information about altitude
                JOptionPane.showMessageDialog(this, L10n.getString("Error.Transformation.S42_Z"), L10n.getString("Common.ErrorMessageTitle"), JOptionPane.ERROR_MESSAGE); 
                return false;
            }
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddEditView(new javax.swing.JFrame(), true, null, false).setVisible(true);
            }
        });
    }

    public void update(Observable o, Object arg) {
        if (arg instanceof Pair) {
            String s = ((Pair<String,Integer>)arg).getFirst();
            int i = ((Pair<String,Integer>)arg).getSecond(); 
            if (s.equals("updateName"))
                phytNameCombo.setSelectedItem(model.getPhytName());
            if (s.equals("addAuthorRow")) {
                tableModel.addRow();
                /*
                DefaultCellEditor dce = (DefaultCellEditor) authorTable.getCellEditor(0,0);
                Object o = dce.getCellEditorValue();
                 */            
            }             
            if (s.equals("removeAuthorRow")) {
                tableModel.removeRow(i);
                //unfortunately have to set up the editors and renderers again because of the
                //fireTableStructureChanged() in the tableModel.removeRow() ... :-/
                //initAuthorTable();            
            }            
        }
        
        if (arg instanceof String) {
            String s = (String)arg;
            
            if (s.equals("CLEAR")) //obsolete and not used anymore
                clearComponentData();
            
            if (s.equals("CLEAR_LOCATION"))
                loadComponentData();
            
            if (s.equals("CLEAR_OCCURRENCE"))
                loadComponentData();

            if (s.equals("PLANTS_CHANGED")) {
                logger.debug("Updating plant area");
                if (model.getPlants() == null) {
                    ((AutoTextArea)taxonTextArea).setChoices(new String[] {""});
                    return;
                }
                Pair<String, Integer>[] plants = model.getPlants();
                String[] choices = new String[plants.length];
                for (int i = 0; i < plants.length; i++) 
                    choices[i] = plants[i].getFirst();
                
                ((AutoTextArea)taxonTextArea).setChoices(choices);
            }
            
            if (s.equals("AUTHORS_CHANGED")) {
                logger.debug("Updating authors combo");
                JComboBox cb;
                
                if (model.getAuthors() == null) 
                    cb = new AutoComboBoxNG3();
                else
                    cb = new AutoComboBoxNG3(model.getAuthors());
                    
                TableColumn tc1 = authorTable.getColumnModel().getColumn(0);

                
                tc1.setCellEditor(new DefaultCellEditor(cb));  
            }

            if (s.equals("AUTHORROLES_CHANGED")) {
                logger.debug("Updating authorroles combobox");
                JComboBox cb;
                
                if (model.getAuthorRoles() == null)
                    cb = new AutoComboBoxNG3();
                else
                    cb = new AutoComboBoxNG3(model.getAuthorRoles());

                TableColumn tc2 = authorTable.getColumnModel().getColumn(1);
                
                tc2.setCellEditor(new DefaultCellEditor(cb));                
            }
            
            if (s.equals("VILLAGES_CHANGED")) {
                logger.debug("Updating villages combobox");
                if (model.getVillages() == null)
                    townComboBox.setModel(new DefaultComboBoxModel(new String[] {""}));
                else
                    townComboBox.setModel(new DefaultComboBoxModel(model.getVillages()));          
            }
            
            if (s.equals("TERRITORIES_CHANGED")) {
                logger.debug("Updating territories combobox");
                if (model.getTerritories() == null)
                    territoryNameCombo.setModel(new DefaultComboBoxModel(new String[] {""}));
                else
                    territoryNameCombo.setModel(new DefaultComboBoxModel(model.getTerritories()));                            
            }

            if (s.equals("PHYTNAMES_CHANGED")) {
                logger.debug("Updating phytnames combobox");
                if (model.getPhytNames() == null)
                    phytNameCombo.setModel(new DefaultComboBoxModel(new String[] {""}));
                else
                    phytNameCombo.setModel(new DefaultComboBoxModel(model.getPhytNames()));                         
            }

            if (s.equals("COUNTRIES_CHANGED")) {
                logger.debug("Updating countries combobox");
                if (model.getCountries() == null)
                    phytCountryCombo.setModel(new DefaultComboBoxModel(new String[] {""}));
                else
                    phytCountryCombo.setModel(new DefaultComboBoxModel(model.getCountries()));       
                phytCountryCombo.insertItemAt(model.EMPTY_STRING,0);
            }
            
            if (s.equals("SOURCES_CHANGED")) {
                logger.debug("Updating sources combobox");
                if (model.getSources() == null)
                    sourceCombo.setModel(new DefaultComboBoxModel(new String[] {""}));
                else
                    sourceCombo.setModel(new DefaultComboBoxModel(model.getSources()));
                sourceCombo.insertItemAt(model.EMPTY_STRING,0);
            }
            
            if (s.equals("PUBLICATIONS_CHANGED")) {
                logger.debug("Updating publications combobox");
                if (model.getPublications() == null)
                    publicationCombo.setModel(new DefaultComboBoxModel(new String[] {""}));
                else
                    publicationCombo.setModel(new DefaultComboBoxModel(model.getPublications()));
                publicationCombo.insertItemAt(model.EMPTY_PAIR,0);
            }

            if (s.equals("PROJECTS_CHANGED")) {
                logger.debug("Updating projects combobox");
                if (model.getProjects() == null)
                    projectCombo.setModel(new DefaultComboBoxModel(new String[] {""}));
                else
                    projectCombo.setModel(new DefaultComboBoxModel(model.getProjects()));                              
            }
            
        }
    }//update
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JLabel altitudeLabel;
    protected javax.swing.JTextField altitudeTextField;
    protected javax.swing.JTable authorTable;
    protected javax.swing.JPanel basicPanel;
    private javax.swing.JPanel buttonPanel;
    protected javax.swing.JButton calendarButton;
    protected javax.swing.JButton cancelButton;
    protected javax.swing.JButton checklistButton;
    protected javax.swing.JButton clearLocationButton;
    protected javax.swing.JButton clearOccurrenceButton;
    private javax.swing.ButtonGroup convertCoordinatesGroup;
    protected javax.swing.JLabel coordinateSystemLabel;
    protected javax.swing.JLabel countryLabel;
    protected javax.swing.JLabel dayLabel;
    protected javax.swing.JTextField dayTextField;
    protected javax.swing.JTextArea descriptionArea;
    private javax.swing.JPanel extendedPanel;
    protected javax.swing.JButton gpsChangeButton;
    protected javax.swing.JButton gpsLoadButton;
    protected javax.swing.JPanel gpsPanel;
    protected javax.swing.JButton gpsShowButton;
    protected javax.swing.JLabel gpsSymbolLabel;
    protected javax.swing.JTextField gpsSymbolTextField;
    protected javax.swing.JLabel gpsTableLabel;
    protected javax.swing.JButton helpButton;
    protected javax.swing.JLabel herbariumLabel;
    protected javax.swing.JTextField herbariumTextField;
    protected javax.swing.JPanel jPanel4;
    protected javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    protected javax.swing.JLabel latitudeLabel;
    protected javax.swing.JTextField latitudeTextField;
    protected javax.swing.JTextArea locationNoteArea;
    protected javax.swing.JLabel locationNoteLabel;
    protected javax.swing.JLabel longitudeLabel;
    protected javax.swing.JTextField longitudeTextField;
    protected com.toedter.calendar.JMonthChooser monthChooser;
    protected javax.swing.JLabel monthLabel;
    protected javax.swing.JTextArea occurrenceNoteArea;
    protected javax.swing.JLabel occurrenceNoteLabel;
    protected javax.swing.JTable occurrenceTable;
    protected javax.swing.JButton okButton;
    protected javax.swing.JComboBox phytCountryCombo;
    protected javax.swing.JComboBox phytNameCombo;
    protected javax.swing.JLabel phytNameLabel;
    protected javax.swing.JLabel placeDescriptionLabel;
    protected javax.swing.JComboBox projectCombo;
    protected javax.swing.JLabel projectLabel;
    protected javax.swing.JComboBox publicationCombo;
    protected javax.swing.JLabel publicationLabel;
    protected javax.swing.JLabel quadrantLabel;
    protected javax.swing.JTextField quadrantTextField;
    private javax.swing.JLabel requiredInfoLabel;
    protected javax.swing.JButton settingsButton;
    protected javax.swing.JComboBox sourceCombo;
    protected javax.swing.JLabel sourceLabel;
    protected javax.swing.JLabel taxonLabel;
    protected javax.swing.JTextArea taxonTextArea;
    protected javax.swing.JComboBox territoryNameCombo;
    protected javax.swing.JLabel territoryNameLabel;
    protected javax.swing.JLabel timeLabel;
    protected javax.swing.JTextField timeTextField;
    private javax.swing.JPanel topPanel;
    protected javax.swing.JComboBox townComboBox;
    protected javax.swing.JLabel townLabel;
    protected javax.swing.JLabel yearLabel;
    protected javax.swing.JSpinner yearSpinner;
    // End of variables declaration//GEN-END:variables
    
}
