/*
 * SimpleProgressBar.java
 *
 * Created on 4. září 2006, 18:44
 */

package net.sf.plantlore.common;

import java.awt.Cursor;
import java.awt.Window;
import java.util.Observable;
import java.util.Observer;

import javax.swing.SwingUtilities;

import net.sf.plantlore.l10n.L10n;

/**
 *
 * @author  yaa
 */
public class SimpleProgressBar extends javax.swing.JDialog implements Observer {
	
	protected Task task;
	protected Window parent;
    
    /** Creates new form SimpleProgressBar */
    public SimpleProgressBar(Task task, java.awt.Frame parent) {
    	super(parent, true);
    	this.task = task;
    	this.parent = parent;
    	
        initComponents();
        initialize();
    }
    
    public SimpleProgressBar(Task task, java.awt.Dialog parent) {
    	super(parent, true);
    	this.task = task;
    	this.parent = parent;
    	
        initComponents();
        initialize();
    }
    
    private void initialize() {
    	setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        cancel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        task.addObserver( this );
    	
        if (task.isDeterminate()) {
            progress.setIndeterminate(false);
            progress.setMinimum(0);
            progress.setMaximum(task.getLength());
        } 
        else
            progress.setIndeterminate(true);
        
        cancel.setAction( new StandardAction("Common.Cancel") {
        	public void actionPerformed(java.awt.event.ActionEvent arg0) {
        		task.kill();
        		task.deleteObservers();
        		 SwingUtilities.invokeLater(new Runnable() {
                     public void run() {
                         setVisible( false );
                         Dispatcher.getDispatcher().finished();
                     }
                 });
        	}
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        progress = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        status = new javax.swing.JTextArea();
        cancel = new javax.swing.JButton();

        setModal(true);
        setResizable(false);
        setUndecorated(true);

        jScrollPane1.setBorder(null);
        status.setBackground(javax.swing.UIManager.getDefaults().getColor("MenuBar.background"));
        status.setColumns(20);
        status.setEditable(false);
        status.setRows(2);
        status.setTabSize(2);
        status.setAutoscrolls(false);
        status.setEnabled(false);
        jScrollPane1.setViewportView(status);

        cancel.setText(L10n.getString("Common.Cancel"));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(progress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cancel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(progress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cancel)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton cancel;
    private javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JProgressBar progress;
    protected javax.swing.JTextArea status;
    // End of variables declaration//GEN-END:variables
    
    
    
    public void update(Observable source, Object parameter) {
    	if(parameter instanceof Pair) {
    		Pair p = (Pair)parameter;
            Object first = p.getFirst();
            if (first instanceof Task.Message) {
            	Task.Message msg = (Task.Message)first;
                Object value = p.getSecond();
                
                switch (msg) {
                case POSITION_CHANGED:
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            progress.setValue(task.getPosition());
                        }
                    });
                    break;
                case MESSAGE_CHANGED:
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            status.setText( task.getStatusMessage() );
                        }
                    });
                    break;
                case STOPPING:
                case STOPPED:
                	SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                        	setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        	cancel.setText(L10n.getString("Common.Hide"));
                        }
                    });
                
                }
            }
    	}
    	else if (parameter instanceof Exception) {
            DefaultExceptionHandler.handle(this, (Exception)parameter);
        }
    }
    
}
